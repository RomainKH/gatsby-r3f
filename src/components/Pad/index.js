/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef, useState } from 'react'
import * as THREE from "three"
import { useGLTF, shaderMaterial } from '@react-three/drei'
import { useSpring, a } from "react-spring/three"
import { extend, useFrame } from "react-three-fiber"
import { useKeyPress } from "../Utils"
import glsl from "babel-plugin-glsl/macro"
import { A11y } from '@react-three/a11y'

// IMPORT SOUNDS
import kick from './sound/kick.wav'
import snare from './sound/snare.wav'
import fx from './sound/fx.wav'
import fx2 from './sound/fx2.wav'
import bass from './sound/bass.wav'
import hat from './sound/hat.wav'
import strings from './sound/strings.wav'
import vox from './sound/vox.wav'
import fat from './sound/fat.wav'


const FadeMaterial = shaderMaterial(
  { time: 0, color: new THREE.Color(0.2, 0.0, 0.1) },
  
  glsl`varying vec2 vUv;
    void main() {
      vUv = uv;
      gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);
    }`,
  glsl`uniform float time;
    uniform vec3 color;
    varying vec2 vUv;
    void main() {
      gl_FragColor.rgba = vec4(0.3 + 0.5 * cos(vUv.yxx + sin(time)) + color, 1.0);
    }`
)
extend({ FadeMaterial })

const Keys = (props) => {
  const keyActive = useKeyPress(props.keyName)
  const [active, setActive] = useState(false)
  const key = useSpring({scale: active | keyActive ? [0.12, 0.013, 0.11] : [0.12, 0.04, 0.11]})
  const ref = useRef()
  useFrame((state, delta) => (active | keyActive ? ref.current.time += delta : null))
  const sound = new Audio(props.sound)
  sound.volume = 0.2
  if(active | keyActive) {sound.play()}
  return (
    <A11y>
      <a.mesh
        {...props}
        castShadow
        onPointerOut={() => setActive(false)}
        onPointerDown={() => setActive(true)}
        onPointerUp={() => setActive(false)}
        scale={key.scale}
      >
        {active | keyActive ? <fadeMaterial ref={ref}/> : <meshStandardMaterial color="#FF7960" roughness="1" metalness="0" />}
      </a.mesh>
    </A11y>
  )
}

const PadObj = React.forwardRef((props, ref) => {
  const group = useRef()
  const { nodes, materials } = useGLTF('../../pad_music.glb')
  return (
    <group ref={group && ref} {...props} dispose={null}>
      <mesh material={materials.Pad} geometry={nodes.Pad.geometry} position={[0, 0.37, 0]} receiveShadow/>
      <Keys
        geometry={nodes.Keys001.geometry}
        position={[-0.33, 0.43, -0.4]}
        rotation={[0.16, 0, 0]}
        keyName="7"
        sound={vox}
      />
      <Keys
        geometry={nodes.Keys002.geometry}
        position={[0.04, 0.43, -0.4]}
        rotation={[0.16, 0, 0]}
        keyName="8"
        sound={strings}
      />
      <Keys
        geometry={nodes.Keys003.geometry}
        position={[0.39, 0.43, -0.4]}
        rotation={[0.16, 0, 0]}
        keyName="9"
        sound={bass}
      />
      <Keys
        geometry={nodes.Keys004.geometry}
        position={[-0.33, 0.37, -0.02]}
        rotation={[0.16, 0, 0]}
        keyName="4"
        sound={fx}
      />
      <Keys
        geometry={nodes.Keys005.geometry}
        position={[0.04, 0.37, -0.02]}
        rotation={[0.16, 0, 0]}
        keyName="5"
        sound={fx2}
      />
      <Keys
        geometry={nodes.Keys006.geometry}
        position={[0.39, 0.37, -0.02]}
        rotation={[0.16, 0, 0]}
        keyName="6"
        sound={fat}
      />
      <Keys
        geometry={nodes.Keys007.geometry}
        position={[-0.33, 0.31, 0.34]}
        rotation={[0.16, 0, 0]}
        keyName="1"
        sound={kick}
      />
      <Keys
        geometry={nodes.Keys008.geometry}
        position={[0.04, 0.31, 0.34]}
        rotation={[0.16, 0, 0]}
        keyName="2"
        sound={snare}
      />
      <Keys
        geometry={nodes.Keys009.geometry}
        position={[0.39, 0.31, 0.34]}
        rotation={[0.16, 0, 0]}
        keyName="3"
        sound={hat}
      />
    </group>
  )
})

useGLTF.preload('../../pad_music.glb')

export {PadObj}